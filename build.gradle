/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'io.spinnaker.project' version "$spinnakerGradleVersion" apply false
  id "org.jetbrains.kotlin.jvm" version "$kotlinVersion" apply false
  id "org.jetbrains.kotlin.plugin.allopen" version "$kotlinVersion" apply false
}


plugins {
  id 'jacoco'
  id 'com.github.kt3k.coveralls' version '2.8.4'
}

allprojects {
  repositories {
    jcenter()
  }
}

subprojects {
  apply plugin: 'jacoco'
  apply plugin: 'com.github.kt3k.coveralls'
}

subprojects { project ->
  group = "com.netflix.spinnaker.front50"
  apply plugin: 'io.spinnaker.project'

  if ([korkVersion, fiatVersion].find { it.endsWith("-SNAPSHOT") }) {
    repositories {
      mavenLocal()
    }
  }

  if (name != "front50-bom") {
    apply plugin: 'java-library'
    apply plugin: 'groovy'

    tasks.compileGroovy.enabled = false

    test {
      testLogging {
        exceptionFormat = 'full'
      }
    }

    tasks.withType(JavaExec) {
      if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8180'
      }
    }

    dependencies {
      implementation(platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion"))
      annotationProcessor(platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion"))
      annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
      testAnnotationProcessor(platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion"))

      implementation("net.logstash.logback:logstash-logback-encoder")

      compileOnly("org.projectlombok:lombok")
      annotationProcessor("org.projectlombok:lombok")
      testAnnotationProcessor("org.projectlombok:lombok")

      testImplementation("org.codehaus.groovy:groovy-all")
      testImplementation("org.spockframework:spock-core")
      testImplementation("org.springframework.boot:spring-boot-starter-test")
      testImplementation("org.spockframework:spock-spring")
      testImplementation("org.springframework:spring-test")
      testImplementation("org.hamcrest:hamcrest-core")
      testRuntimeOnly("cglib:cglib-nodep")
      testRuntimeOnly("org.objenesis:objenesis")
    }
  }
}

defaultTasks ':front50-web:run'

def jacocoProjects = subprojects.findAll { it.path != ':front50-bom' }
task jacocoMerge(type: JacocoMerge) {
  jacocoProjects.each { subproject ->
    executionData subproject.tasks.withType(Test)
  }
  doFirst {
    executionData = files(executionData.findAll { it.exists() })
  }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
  description = 'Generates an aggregate report from all subprojects'
  dependsOn jacocoProjects.test, jacocoMerge

  getSourceDirectories().setFrom(jacocoProjects.sourceSets.main.allSource.srcDirs)
  getClassDirectories().setFrom(jacocoProjects.sourceSets.main.output)

  executionData jacocoMerge.destinationFile

  reports {
    html.enabled = true // human readable
    xml.enabled = true // required by coveralls
  }
}

coveralls {
  sourceDirs = jacocoProjects.sourceSets.main.allSource.srcDirs.flatten()
  jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
  group = 'Coverage reports'
  description = 'Uploads the aggregated coverage report to Coveralls'

  dependsOn jacocoRootReport
}
